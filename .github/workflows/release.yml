name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      build_target:
        description: "Build Target (e.g storage/object)"
        required: true
      tag:
        description: "Tag for this release"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./delivery-toolkit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Needed for branch operations

      - name: Configure Go
        uses: actions/setup-go@v5

      - name: Install dependencies
        run: go mod download

      - name: Get Build Target
        id: process_target
        run: |
          # Read the input for a single build target
          build_target="${{ github.event.inputs.build_target }}"

          # Print and save the build target
          echo "Build target: $build_target"
          echo "target=$build_target" >> $GITHUB_OUTPUT

      - name: Create Release Artifacts
        run: |
          # Create all artifacts for the specified build target
          build_target="${{ steps.process_target.outputs.target }}"
          echo "Creating Artifacts for: $build_target"
          go run . "yaml" --build-target $build_target
          go run . "md" --build-target $build_target
          go run . "release-notes" --build-target $build_target

          # Create PDF files from MD files
          echo "Converting MD file to PDF"
          for md_file in ./artifacts/*.md; do
            filename=$(basename "$md_file" .md)

            # Check if the filename contains "release-notes"
            if [[ $filename != *"release_notes"* ]]; then
                echo "Converting $md_file to $filename.pdf"
                docker run --rm -v "$PWD:/app" jmaupetit/md2pdf "./artifacts/$filename.md" "./artifacts/$filename.pdf"
            else
                echo "Skipping $md_file as it contains 'release-notes'"
            fi
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ccc-catalogs
          path: ./delivery-toolkit/artifacts/*
          if-no-files-found: error
          retention-days: 1 # Maximum Retention

      - name: Move YAML artifact to website/static/releases
        run: |
          yaml_file=$(ls ./delivery-toolkit/artifacts/*.yaml | head -n 1)
          filename=$(basename "$yaml_file")
          mkdir -p website/static/releases
          mv "$yaml_file" "website/static/releases/$filename"
          echo "YAML file moved to website/static/releases/$filename"
          echo "filename=$filename" >> $GITHUB_ENV

      - name: Set up Git user
        run: |
          git config --global user.name "ccc-releaser[bot]"
          git config --global user.email "ccc-releaser[bot]@users.noreply.github.com"

      - name: Create new branch, commit, and push
        run: |
          branch="release-artifact-${{ env.filename }}"
          git checkout -b "$branch"
          git add "website/static/releases/${{ env.filename }}"
          git commit -m "Add release artifact ${{ env.filename }}"
          git push origin "$branch"
          echo "branch=$branch" >> $GITHUB_ENV

      - name: Create Pull Request to Update Website
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Add release artifact ${{ env.filename }}" \
            --body "Automated PR to add release artifact ${{ env.filename }}" \
            --base main \
            --head "$branch"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: ccc-catalogs

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          body_path: ./release_notes.md
          tag_name: ${{ github.event.inputs.tag }}-rc
          release_name: Release ${{ github.event.inputs.tag }}-rc
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the artifacts to the release
      - name: Upload Release Assets
        run: |
          for file in ./*
          do
            echo "Uploading $file"
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}=$filename&label=$filename"
          done
